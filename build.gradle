apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = '1.8'

version = '1.0-SNAPSHOT'

mainClassName = 'jmodern.Main2'

test.scanForTestClasses = false

repositories {
    mavenCentral()
    mavenLocal()
}

configurations {

    all*.exclude group: "org.apache.logging.log4j", module: "*"

    //the fibers
    //quasar

    //the packaging
    capsule
}




dependencies {

    compile 'dk.statsbiblioteket.sbutil:sbutil-common:0.5.17'
    compile "eu.scape-project.model:scape-platform-datamodel-SB:0.1.8-SNAPSHOT"

    compile "co.paralleluniverse:comsat-jax-rs-client:0.1.1"

    compile "org.slf4j:slf4j-api:1.7.7"
    runtime "org.slf4j:slf4j-jdk14:1.7.7"

    compile 'com.google.guava:guava:17.0'

    testCompile group: 'junit', name: 'junit', version: '4.11'


/*
    quasar 'co.paralleluniverse:quasar-core:0.5.0'
    compile 'co.paralleluniverse:quasar-core:0.5.0'
*/

    capsule "co.paralleluniverse:capsule:0.3.1"
}

run {
   // jvmArgs "-javaagent:${configurations.quasar.iterator().next()}" // gradle should make this simpler, too
}

task capsule(type: Jar, dependsOn: jar) {
    archiveName = "jmodern-capsule.jar"
    from sourceSets.main.output // this way we don't need to extract
    from { configurations.capsule.collect { zipTree(it) } }

    manifest {
        attributes(
                'Main-Class': 'Capsule',
                'Application-Class': mainClassName,
                'Extract-Capsule': 'false', // no need to extract the capsule
                'Min-Java-Version': '1.8.0',
             //   'JVM-Args': run.jvmArgs.join(' '),
                'System-Properties': run.systemProperties.collect { k, v -> "$k=$v" }.join(' '),
                //'Java-Agents': getDependencies(configurations.quasar).iterator().next(),
                'Dependencies': getDependencies(configurations.runtime).join(' ')
        )
    }
}

// converts Gradle dependencies to Capsule dependencies
def getDependencies(config) {
    return config.getAllDependencies().collect {
        def res = it.group + ':' + it.name + ':' + it.version +
                (!it.artifacts.isEmpty() ? ':' + it.artifacts.iterator().next().classifier : '')
        if (!it.excludeRules.isEmpty()) {
            res += "(" + it.excludeRules.collect { it.group + ':' + it.module }.join(',') + ")"
        }
        return res
    }
}
